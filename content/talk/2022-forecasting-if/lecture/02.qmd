---
title: "02 - Вступ до R"
subtitle: "Прогнозування часових рядів"
author: "Ігор Мірошниченко"
date: "оновлено: `r Sys.Date()`"
institute: КНЕУ::ІІТЕ
crossref:
  fig-title: Рис.     # (default is "Figure")
  tbl-title: Таб.     # (default is "Table")
format:
  revealjs: 
    theme: [moon, custom.scss]
    footer: "[Data Mirosh](https://t.me/araprof)"
    logo: img/logo.png
    chalkboard: true
    slide-number: true
    toc: true
    toc-title: ЗМІСТ
    transition: fade
    mouse-wheel: true
    highlight-style: github
    mainfont: metropolis
    toc-depth: 1
editor: visual
knitr: 
  opts_chunk: 
    echo: false
    warnings: false
---

```{r setup, include=FALSE}
#| cache: true
library(fontawesome)
library(tidyverse)
library(fpp3)
library(fpp2)
```

# RStudio

## Іконка RStudio

Після встановлення R та RStudio, на робочому столі у вас буде дві іконки:

![](img/r_00.png) - це для самої мови програмування

![](img/rstudio_00.png) - це для IDE

## Базовий інтерфейс RStudio

![](img/rstudio_01.png)

## Створення скрипту
Як правило код пишуть у скрипті (такий собі аналог текстового редактора), тож для його створення необхідно натиснути зелений хрестик в лівому верхньому куті та обрати пункт **R Script** або натиснути комбінацію клавіш **Ctrl+Shift+N**:

![](img/rstudio_02.png){fig-alight='center'}

## Інтерфейс RStudio
![](img/rstudio_03.png){fig-alight='center'}

# Базові операції R

## R та арифметика
```{r}
#| echo: true

# Додавання
2 + 2

# Віднімання
5 - 2

# Множення
3 * 5

# Ділення
25 / 5

# Степінь
3 ^ 3 

# Залишок від ділення
5 %% 3

# Цілочисельне ділення
17 %/% 5
```

## Коментарі до коду
Для додавання коментарів використовується знак решітки або, як його ще називають, дієз — #. Все, що написано у рядку після # ігнорується R:
```{r}
#| echo: true
# look at this awesome code
2 + 2 - 3 + 1
```
Якщо необхідно “закоментувати” частину коду, тобто поставити # на початку кожного рядка, то для цього є комбінація клавіш **Ctrl + Shift + C**.

## Пріоритети розрахунків
Не забувайте правильно розставляти дужки:
```{r}
#| echo: true
2 + 3 * 4

(2 + 3) * 4
```

## Готові функції
```{r}
#| echo: true

sqrt(9)

sqrt((2 + 3) * 4)

abs(3 - 5)

log(15)

log(x = 10, base = 3)

log(base = 3, x = 10)

log(10, 3)
```

## Вбудована документація
```{r}
#| echo: true
#| eval: false
help(abs)

?abs()
```

Але на мою думку, **найшвидший варіант** — це написати функцію і **натиснути клавішу F1** на клавіатурі.

![](img/rstudio_04_fix.png)

## Створення змінних
В R це робиться за допомогою символів <-. Для швидкого написання існує зручна комбінація клавіш **Alt + -**.

Ліворуч від символу <- записується назва майбутньої змінної. Праворуч — значення або вираз, яке необхідно зберегти в цю змінну.

```{r}
#| echo: true
x <- 2
y <- 4
z <- sqrt(x^2 + y^3)
```

Для присвоювання можна використовувати і знак = але серед спільноти користувачів R це не прийнято.

Слід звернути увагу, що при присвоюванні результат розрахунку не виводиться в консоль. Якщо ж хочеться переглянути результат слід використати функцію `print()` або просто звернутися до створеної змінної:
```{r}
#| echo: true
print(z)
```

## Environment
Після створення змінна з’являється у вкладинці Environment робочого простору RStudio:

![](img/rstudio_05.png)

## Оператори порівняння
| Оператор порівняння | Опис                | Приклад |
|:-------------------:|---------------------|---------|
|          ==         | Дорівнює            | a == b  |
|          !=         | Не дорівнює         | a != b  |
|          >          | Більше              | a > b   |
|          <          | Менше               | a < b   |
|          >=         | Більше або дорівнює | a >= b  |
|          <=         | Менше або дорівнює  | a <= b  |

# Типи даних

## Число

Один з найпопулярніших варіантів збереження даних — це числовий формат. В мові програмування R для нього є окремий клас — **numeric**. При цьому існує три типи numeric:

- Цілі: **integer.**
- Дробові: **double.**
- Комплексні: **complex.**
```{r}
#| echo: true

class(10)
typeof(10)
typeof(10L)
is.integer(10)
```


## Текст
Для роботи з текстовими даними є клас **character.** Вони записуються в лапках, при цьому можна використовувати як подвійні `"`, так і одинарні `'`.

```{r}
#| echo: true

is.character("Ash nazg durbatulûk, ash nazg gimbatul,
             ash nazg thrakatulûk, agh burzum-ishi krimpatul.")
```


## Логічні
Це тип даних які приймають лише значення `TRUE` або `FALSE.` Ми з ними вже зустрічалися коли використовували оператори порівняння.

# Структури даних


## Закальна класифікація
![](img/001_data_stucture.png)


## Вектор
**Вектор** - це одновимірна послідовність елементів одного типу. Для створення вектору використовується функція `c()`.
```{r}
#| echo: true

c(2, 4, 8, -2, -6, 0)

c("два", "чотири", "шість")

c(TRUE, TRUE, FALSE)
```

Для створення послідовностей з кроком 1 зручно використовувати оператор `:`
```{r}
#| echo: true

-5:5

3:-2
```

## Вектор

Для складніших послідовностей є вбудована функція `seq()`
```{r}
#| echo: true
seq(1, 10, by = 2)

seq(1, 10, length.out = 3)
```

Інша корисна функція `rep()` дозволяє створити вектор з повторюваними значеннями. Перший аргумент - значення яке слід повторювати, другий аргумент - скільки разів повторювати.
```{r}
#| echo: true

rep(3, 5)

rep(1:3, 5)

rep(1:3, 1:3)
```

## Вектор

Крім того, можна об’єднувати вектори:

```{r}
#| echo: true
v1 <- c("Say", "friend")

v2 <- c("and", "enter")

c(v1, v2)
```

## Приведення типів
#### Неявне приведення типів
```{r}
#| echo: true

c(TRUE, 2, FALSE)

3 - TRUE

c(TRUE, 2, "Hello")
```

В R є своя ієрархія типів: `NULL < raw < logical < integer < double < complex < character < list < expression`

#### Явне приведення типів
```{r}
#| echo: true

as.numeric(c(TRUE, 2, FALSE, FALSE))
as.character(c(TRUE, 2, FALSE, FALSE))
```

## Операції з векторами
```{r}
#| echo: true

q <- 1:5
w <- 2:6
q + w
q - w
q * w
q / w
w ^ q + q - w * q
sqrt(q)
```

## Правило переписування

```{r}
#| echo: true

q <- 1:2
w <- 1:4
q * w

q + c(1, 5, 7)
```

## Індексація векторів
> Важливо: індексація в мові програмування R починається з 1.

```{r}
#| echo: true

e <- c(-5:-3, 2, 7, -6, 4:2)
e[1]
e[5]
e[5] <- 15
e[6:1]
e[-1]
e[c(-1, -5)]
```

## Матриці, масиви, списки

- [Матриці](https://aranaur.github.io/r_forecasting/intro_r.html#r_matrix)

- [Масиви](https://aranaur.github.io/r_forecasting/intro_r.html#r_array)

- [Списки](https://aranaur.github.io/r_forecasting/intro_r.html#r_list)

## Дата фрейми
**Дата фрейми (data frames)**: різні стовпчики можуть містити різний тип даних (але їх довжина має бути однаковою). Для створення дата фрейму використовується функція `data.frame()`.
```{r}
#| echo: true
my_df <- data.frame(name = c("Frodo", "Eowyn", "Legolas", "Arwen"),
                    sex = c("male", "female", "male", "female"),
                    age = c(51, 24, 2931, 2700),
                    one_ring = c(TRUE, FALSE, FALSE, FALSE))
my_df
```

Переглянути структуру дата фрейму можна за допомогою функції `str()`:
```{r}
#| echo: true
str(my_df)
```

## Дата фрейми
Переглянути назви стовпців або надати їм нову назву можна за допомогою функції `names()`:
```{r}
#| echo: true

names(my_df)
```

Індексація аналогічно до матриці та списків можлива через `[]` та знак `$`:
```{r}
#| echo: true

my_df$name
my_df$name[2:3]
my_df[2,3]
my_df[2:3, "name"]
```

# Пакети в R

## Вбудовані пакети
R - мова програмування з дуже широкими можливостями. Однак рано чи пізно ми почнемо стикатися з задачами, які потребуватимуть додаткових можливостей. Ці можливості можна розширити за допомогою додаткових **пакетів (packages)**.

```{r}
#| echo: true

rownames(installed.packages(priority = "base"))
```

## Встановлення пакетів з CRAN
Пакети які пройшли перевірку зберігаються в **Comprehensive R Archive Network (CRAN)**.

Встановити додаткові пакети можна за допомогою **Install** в розділі **Packages**:

![](img/003_install_pack.png)![](img/004_install_pack.png)

## Підключення пакетів
Після завантаження пакета, для того щоб почати користуватися його функціоналом необхідно його підключити до поточної сесії. Для цього використовується функція `library()`. Назву пакету можна писати як в лапках так і без них.
```{r}
#| echo: true
#| eval: false
library(vroom)
```

## Мінімальний набір пакетів для вивчення дисципліни

- tidyverse
- fpp3


# Дякую за увагу! {.unnumbered .unlisted}
