---
title: "01 - Вступ до прогнозування"
subtitle: "Прогнозування часових рядів"
author: "Ігор Мірошниченко"
date: "оновлено: `r Sys.Date()`"
institute: КНЕУ::ІІТЕ
crossref:
  fig-title: Рис.     # (default is "Figure")
  tbl-title: Таб.     # (default is "Table")
format:
  revealjs: 
    theme: [moon, custom.scss]
    # footer: <https://t.me/araprof>
    logo: img/logo.png
    chalkboard: true
    slide-number: true
    toc: true
    toc-title: ЗМІСТ
    transition: fade
    mouse-wheel: true
    highlight-style: github
    mainfont: metropolis
    toc-depth: 1
editor: visual
knitr: 
  opts_chunk: 
    echo: false
    warnings: false
---

```{r setup, include=FALSE}
library(fontawesome)
library(tidyverse)
library(fpp3)
library(fpp2)
```

# Про мене

::: nonincremental

-   Мірошниченко Ігор Вікторович
-   кандидат економічних наук
-   доцент кафедри математичного моделювання і статистики КНЕУ
-   викладач Міжнародного інституту бізнесу (MBA)

`r fa("envelope")` ihor.miroshnychenko\@kneu.ua

`r fa("house")` [aranaur.rbind.io](https://aranaur.rbind.io)

`r fa("github")` [\@aranaur](https://github.com/Aranaur)

`r fa("linkedin")` [\@ihormiroshnychenko](https://www.linkedin.com/in/ihormiroshnychenko/)

`r fa("telegram")` [Data Mirosh](https://t.me/araprof) :::

# Що можна прогнозувати?

------------------------------------------------------------------------

## Прогнозувати складно

![](img/01.png)

------------------------------------------------------------------------

## Прогнозувати складно

![](img/02.png)

------------------------------------------------------------------------

## Що можна прогнозувати?

![](img/03.png)

------------------------------------------------------------------------

## Що можна прогнозувати?

![](img/04.png)

------------------------------------------------------------------------

## Що можна прогнозувати?

![](img/05.png)

------------------------------------------------------------------------

## Що можна прогнозувати?

![](img/06.png)

------------------------------------------------------------------------

## Що можна прогнозувати?

![](img/07.png)

------------------------------------------------------------------------

## Що можна прогнозувати?

![](img/08.png)

------------------------------------------------------------------------

## Що можна прогнозувати?

![](img/09.png)

------------------------------------------------------------------------

## Головні питання щодо складності?

-   Як визначтит "простоту" прогнозування?

-   Що впливає на простоту/складність прогнозування?

------------------------------------------------------------------------

## Фактори, що впливають на якість прогнозу

Щось легше спрогнозувати, якщо:

1.  Ми добре розуміємо фактори, які цьому сприяють;

2.  Є багато даних;

3.  Майбутнє чимось схоже на минуле

4.  Прогнози не можуть вплинути на те, що ми намагаємось передбачити.

# Дані часових рядів

## Найпростіші приклади

-   Річний прибуток Google

-   Щоквартальне виробництво пива

-   Щомісячні опади

-   Щотижневі роздрібні продажі

-   Щоденні ціни акцій IBM

-   Погодинний попит на електроенергію

-   Прогноз навантаження на автостради

-   Дані про транзакції за певний час

------------------------------------------------------------------------

## Щоквартальне виробництво пива

```{r}
#| output-location: slide
aus_production %>% autoplot(Beer)
```

------------------------------------------------------------------------

## Щоквартальне виробництво пива

```{r}
aus_production %>%
  model(ETS(Beer)) %>%
  forecast() %>% 
  autoplot(., aus_production)
```

# Приклади досліджень

## Приклад 1. Компанія з виробництва паперового посуду

**Проблема:** Хочемо будувати прогнозии для сотень найменувань. Часові ряди різні: стаціонарні, трендові, сезонні. Наразі є готовий софт з прогнозування, але результати виглядають незадовільними. Необхідно провести аналітику та визначити слабкі місця.

**Додаткова інформація:**

-   Програма, написана на COBOL, обмежує числові розрахунки. Неможливо здійснити оптимізацію.

-   Їх програміст має невеликий досвід чисельних обчислень.

-   Вони не наймають статистиків/аналітиків/дата-сайнтистів і хочуть, щоб програма автоматично створювала прогнози.

------------------------------------------------------------------------

## Приклад 1. Компанія з виробництва паперового посуду

#### Методи, що використовуються в даний час:

-   середнє за 12 місяців

-   середнє за 6 місяців

-   лінійна регресія за останні 12 місяців

-   лінійна регресія за останні 6 місяців

-   середня зміна між значеннями минулого та цього року

-   середня зміна між значеннями за 6 місяців

## Приклад 2. Схема фармацевтичних переваг (PBS)

Це програма Уряд Австралії що субсидує ліки за рецептом для громадян Австралії та постійних мешканців, а також іноземних відвідувачів, на яких поширюється угода про взаємне медичне обслуговування.

-   Багато ліків, куплених в аптеках, субсидуються, щоб забезпечити більш справедливий доступ до сучасних ліків.

-   Витрати для уряду визначаються кількістю та видами придбаних ліків. В даний час майже 1 % ВВП.

-   Загальна вартість кошторису формується на основі прогнозів вживання ліків

------------------------------------------------------------------------

## Приклад 2. Схема фармацевтичних переваг (PBS)

-   У 2001 році: бюджет на $ 4,5 млрд., Прогноз на суму $ 800 млн.

-   Тисячі продуктів. Сезонний попит.

-   Прихований маркетингу, нестабільність продукції, неконтрольовані витрати.

-   Хоча щомісячні дані доступні за останні 10 років, дані узагальнюються до річних значень, і лише перші три роки використовуються для оцінки прогнозів.

-   Усі прогнози виконуються за допомогою функції ПРЕДСКАЗ у MS-Excel!

## Приклад 4. Авіалінії

```{r}
melsyd %>%
  autoplot() +
  labs(
    title = "Passengers",
    subtitle = "Melbourne-Sydney",
    x = "Year",
    y = "Thousands"
  )
```

------------------------------------------------------------------------

## Приклад 4. Авіалінії

**Проблема:** як спрогнозувати пасажиропотік на основних маршрутах?

*Додаткова інформація:* \* Вони можуть надавати велику кількість даних про попередні маршрути.

-   На рух впливають шкільні канікули, спеціальні події, рекламні кампанії, поведінка конкурентів тощо.

-   У них досвідчена команда людей, які здатні робити більшість обчислень.

# Основи статистичного прогнозування

## Прості прогнози

![](img/10.png)

------------------------------------------------------------------------

## Довірчі інтервали

![](img/11.png)

## Що слід згадати?

-   Що прогнозуємо: випадкова величина, *y*<sub>*t*</sub>.

-   Розподіл прогнозу: якщо ${\cal T}$ - це всі спостереження, то $y\_{t} \| {\cal T}$ означає "випадкову змінну *y*<sub>*t*</sub>, враховуючи те, що ми знаємо в ${\cal T}$.

-   "Точковий прогноз" - це середнє значення (або медіана) $y\_{t}\|{\cal T}$

-   "Дисперсія прогнозу" - $\text{var}\[y\_ {t}\|{\cal T}\]$

-   Інтервал прогнозування або "інтервальний прогноз" - це діапазон значень *y*<sub>*t*</sub> з високою ймовірністю.

-   З часовими рядами *y*<sub>*t*\|*t* − 1</sub> = *y*<sub>*t*</sub>\|{*y*<sub>1</sub>, *y*<sub>2</sub>, ..., *y*<sub>*t* − 1</sub>}.

-   *ŷ*<sub>*T* + *h*\|*T*</sub> = E\[*y*<sub>*T* + *h*</sub>\|*y*<sub>1</sub>,...,*y*<sub>*T*</sub>\] ( *h* -кроковий прогноз з урахуванням усіх спостережень до часу *T*).

------------------------------------------------------------------------

# R та RStudio

## Мова програмування та IDE

-   Мова програмування `r fa("r-project")`

-   RStudio IDE

## Встановлення софту та реєстрація

1.  Завантажити [R](https://www.r-project.org/).

2.  Завантажити [RStudio](https://www.rstudio.com/products/rstudio/download/preview/).

Якщо виникли питання на будь-якому кроці, звертайтесь.

Також рекомендую ознайомитись з інструкціями до Дженні Брайана - [Happy Git and GitHub for the useR](http://happygitwithr.com)

## Деякі доповнення для ОС

Я докладно розповім про додаткові вимоги до програмного забезпечення, коли виникне така потреба. Однак, щоб допомогти усунути деякі проблеми з встановленням програмного забезпечення, виконайте також наступне (залежно від вашої ОС):

-   **Windows:** Встановіть [Rtools](https://cran.r-project.org/bin/windows/Rtools/).
-   **Mac:** Рекомендую встановити (не обов'язково) [Homebrew](https://brew.sh/).
-   **Linux:** Все ок.

## Чому R та RStudio?

```{R, indeeddotcom, echo = F, fig.height = 6, fig.width = 9, dev = "svg"}
# The popularity data
pop_df = 
  data.frame(
  lang = c("SQL", "Python", "R", "SAS", "Matlab", "SPSS", "Stata"),
  n_jobs = c(107130, 66976, 48772, 25644, 11464, 3717, 1624),
  free = c(T, T, T, F, F, F, F)
  )
## Plot it
pop_df %>% 
  mutate(lang = lang %>% factor(ordered = T)) %>%
  ggplot(aes(x = lang, y = n_jobs, fill = free)) +
  geom_col() +
  geom_hline(yintercept = 0) +
  aes(x = reorder(lang, -n_jobs), fill = reorder(free, -free)) +
  xlab("Статистична мова") +
  scale_y_continuous(label = scales::comma) +
  ylab("Кількість вакансій") +
  labs(
    title = "Порівняння статистичних мов",
    subtitle = "Кількість вакансій на Indeed.com, 2019/01/06"
    ) +
  scale_fill_manual(
    "Безкоштовна?",
    labels = c("Так", "Ні"),
    values = c("#f92672", "darkslategray")
    ) +
  ggthemes::theme_pander(base_size = 17) +
  # theme_ipsum() +
  theme(legend.position = "bottom")
```

## Чому R та RStudio? (прод.) {.smaller}

### Data science positivism

-   Поряд з Python, R став *де-факто* мовою для науки про дані.
    -   Дивіться: [*The Impressive Growth of R*](https://stackoverflow.blog/2017/10/10/impressive-growth-r/), [*The Popularity of Data Science Software*](http://r4stats.com/articles/popularity/)
-   З відкритим кодом (безкоштовно!) із великою базою користувачів, що охоплює наукові кола та промисловість.
    -   Компанії які використовують R: Amazon, Google, Meta, Twitter, Uber, Deloitte, Glovo...

### Місток до прикладних сфер та інших інструментів

-   Уже має підтримку всієї статистики та економетрики та дивовижно адаптується як «клей» до інших мов програмування та API.
-   RStudio IDE та її екосистема забезпечують бездоганну інтеграцію.

### Залежність

-   Це мова яку я люблю та популяризую^\[Але вивчення кількох мов є гарною ідеєю.\].

## Деякі основи R

1.  Усе є об'єктом.

2.  Усе має ім'я

3.  Ви все робите за допомогою функцій.

4.  Функції поставляються у попередньо створених пакетах, хоча ви можете --- і повинні --- також писати власні функції.

## R приклад коду (лінійна регресія)

```{r}
#| echo: true
fit <- lm(mpg ~ wt, data = mtcars)
summary(fit)
```

## Базова візуалізація R

```{r mtcars_baseplot}
#| echo: true
par(mar = c(4, 4, 1, .1)) ## Це просто налаштування до відображення на слайді
plot(mtcars$wt, mtcars$mpg)
abline(fit, col = "red")
```

## ggplot2

```{r mtcars_ggplot}
#| echo: true
library(ggplot2)
ggplot(data = mtcars, aes(x = wt, y = mpg)) + 
  geom_smooth(method = "lm", col = "red") + 
  geom_point() 
```

## ggplot2: Gapminder

Оскільки ми будемо будувати графік набору даних [gapminder](https://github.com/jennybc/gapminder), корисно знати, що він містить панельні дані про тривалість життя, чисельність населення та ВВП на душу населення для 142 країн з 1950-х років.

```{r gapm}
#| echo: true
library(gapminder)
gapminder
```

## ggplot2: Gapminder

```{r aesthetics0}
#| echo: true
ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + 
  geom_point()
```

## ggplot2: Gapminder

```{r aesthetics1}
#| echo: true
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp,
                             size = pop, col = continent)) + geom_point(alpha = 0.3)
```

## ggplot2: Gapminder

```{r layers1}
#| echo: true
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + 
  geom_point(aes(size = pop, col = continent), alpha = 0.3) +
  scale_color_brewer(name = "Continent", palette = "Set1") + ## Інша плітра кольорів
  scale_size(name = "Population", labels = scales::comma) + ## Інші позначки легенди
  scale_x_log10(labels = scales::dollar) + ## Логарифмування на осі х. Використання знаку долара.
  labs(x = "Log (GDP per capita)", y = "Life Expectancy") + ## Кращі підписи до осей
  theme_minimal() ## Мінімалистична (ч/б) тема рисунку
```

## ggplot2: Gapminder

```{r}
#| echo: true
library(hrbrthemes)
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(aes(size = pop, col = continent), alpha = 0.3) +
  scale_color_brewer(name = "Continent", palette = "Set1") +
  scale_size(name = "Population", labels = scales::comma) +
  scale_x_log10(labels = scales::dollar) + 
  theme_modern_rc() + 
  geom_point(aes(size = pop, col = continent), alpha = 0.2)
```

## ggplot2: Gapminder

::: {.panel-tabset}

### Код

```{r}
#| echo: true
#| eval: false
library(gganimate)
gapminder %>% 
  filter(continent != "Oceania") %>% 
  ggplot(aes(gdpPercap, lifeExp, size = pop, colour = country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  scale_x_log10() +
  facet_wrap(~continent) +
  labs(title = 'Year: {frame_time}', x = 'Log (GDP per capita)', y = 'Life expectancy') +
  transition_time(year) +
  ease_aes('linear')
```

### Aнімація

```{r}
#| cache: true
library(gganimate)
gapminder %>% 
  filter(continent != "Oceania") %>% 
  ggplot(aes(gdpPercap, lifeExp, size = pop, colour = country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  scale_x_log10() +
  facet_wrap(~continent) +
  labs(title = 'Year: {frame_time}', x = 'Log (GDP per capita)', y = 'Life expectancy') +
  transition_time(year) +
  ease_aes('linear')
```

:::

# Дякую за увагу! {.unnumbered .unlisted}
